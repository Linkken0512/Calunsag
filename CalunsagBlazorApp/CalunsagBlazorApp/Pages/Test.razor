@using CalunsagBlazorApp.Data
@using Dapper
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.Data.SqlClient
@using System.Data
@page "/Test"

<h3>Test</h3>

<form method="post">
<div class="mb-3">
    <label for="exampleFormControlInput1" class="form-label">First Name</label>
        <input type="text" placeholder="Example: John" asp-for="prof.FirstName">
</div>
<div class="mb-3">
    <label for="exampleFormControlInput1" class="form-label">Last Name</label>
        <input type="text" placeholder="Example: Jerk" asp-for="prof.LastName">
</div>
<div class="mb-3">
    <label for="exampleFormControlInput1" class="form-label">First Name</label>
        <input type="text" placeholder="Example: 1s" asp-for="prof.Age">
</div>
<div class="mb-3">
    <label for="exampleFormControlInput1" class="form-label">Level</label>
        <input type="text" placeholder="Example: 1" asp-for="prof.Lvl">
</div>

    <button asp-page-handler="Create">Add</button>
</form>




@code {
    #nullable disable
    public MyProfile prof;
    [BindProperties]
    public class MyProfile : PageModel
    {
        private readonly ILogger<MyProfile> _logger;
        private readonly IConfiguration _config;
        private readonly SqlConnection conn;
        private Profiles profiles;
        public string Key { get; set; }
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public int? Age { get; set; }
        public int Lvl { get; set; }
        public IEnumerable<Profiles> profList { get; set; }

        public MyProfile(ILogger<MyProfile> logger, IConfiguration config)
        {
            _logger = logger;
            _config = config;
            conn = new SqlConnection(_config.GetConnectionString("db"));
            profList = conn.Query<Profiles>("[displayProf]", commandType: CommandType.StoredProcedure);

        }
        public IActionResult OnPostCreate()
        {
            conn.Query("[createProf]", new
            {                
                @FirstName = FirstName,
                @LastName = LastName,
                @Age = Age,
                @Lvl = Lvl

            }, commandType: CommandType.StoredProcedure);

            return Page();
        }
        public IActionResult OnPostDelete()
        {
            conn.Query("[deleteProf]", new
            {
                @Id = Id

            }, commandType: CommandType.StoredProcedure);

            return RedirectToPage();
        }
        public IActionResult OnPostUpdate()
        {
            conn.Query("[updateProf]", new
            {
                @Id = Id,
                @FirstName = FirstName,
                @LastName = LastName,
                @Age = Age,
                @Lvl = Lvl

            }, commandType: CommandType.StoredProcedure);

            return RedirectToPage();
        }
        public IActionResult OnPostSearch()
        {
            profList = conn.Query<Profiles>("[searchProf]", new
            {
                @Key = $"%{Key}%"
            }, commandType: CommandType.StoredProcedure);

            return Page();
        }
    }
}
