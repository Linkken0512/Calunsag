@page "/players"
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@using System.Text.Json


<h1>Players CRUD</h1>

<div class="form-container">
    <h2>Add New Player</h2>
    <div class="form-group">
        <label for="playerName">Player Name:</label>
        <input type="text" id="playerName" @bind="newPlayer.PlayerName" />
    </div>
    <div class="form-group">
        <label for="level">Level:</label>
        <input type="text" id="level" @bind="newPlayer.Level" />
    </div>
    <div class="form-group">
        <label for="job">Job:</label>
        <input type="text" id="job" @bind="newPlayer.Job" />
    </div>
    <div class="form-group">
        <label for="class">Class:</label>
        <input type="text" id="class" @bind="newPlayer.Class" />
    </div>
    <div class="form-group">
        <label for="guild">Guild:</label>
        <input type="text" id="guild" @bind="newPlayer.Guild" />
    </div>
    <button class="btn btn-success" @onclick="AddPlayer">Add Player</button>
    <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
</div>



<table class="table">
    <thead>
        <tr>
            <th>Player ID</th>
            <th>Player Name</th>
            <th>Level</th>
            <th>Job</th>
            <th>Class</th>
            <th>Guild</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var player in players)
        {
            <tr>
                <td>@player.PlayerId</td>
                <td>@player.PlayerName</td>
                <td>@player.Level</td>
                <td>@player.Job</td>
                <td>@player.Class</td>
                <td>@player.Guild</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditPlayer(player.PlayerId)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeletePlayer(player.PlayerId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>



@code {
    private List<Player> players = new List<Player>();
    private Player newPlayer = new Player();
    private Player selectedPlayer = null;
    private int nextPlayerId = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayersFromIndexedDB();
    }

    private async Task LoadPlayersFromIndexedDB()
    {
        var storedPlayersJson = await JsRuntime.InvokeAsync<string>("getPlayerDataFromIndexedDB");
        if (!string.IsNullOrEmpty(storedPlayersJson))
        {
            players = JsonSerializer.Deserialize<List<Player>>(storedPlayersJson);
        }
    }

    private void AddPlayer()
    {
        newPlayer.PlayerId = nextPlayerId++;
        players.Add(new Player
            {
                PlayerId = newPlayer.PlayerId,
                PlayerName = newPlayer.PlayerName,
                Level = newPlayer.Level,
                Job = newPlayer.Job,
                Class = newPlayer.Class,
                Guild = newPlayer.Guild
            });

        newPlayer = new Player();
    }

    private void DeletePlayer(int playerId)
    {
        var playerToRemove = players.FirstOrDefault(p => p.PlayerId == playerId);
        if (playerToRemove != null)
        {
            players.Remove(playerToRemove);
        }
    }

    private void EditPlayer(int playerId)
    {
        selectedPlayer = players.FirstOrDefault(p => p.PlayerId == playerId);
        if (selectedPlayer != null)
        {
            newPlayer = new Player
                {
                    PlayerId = selectedPlayer.PlayerId,
                    PlayerName = selectedPlayer.PlayerName,
                    Level = selectedPlayer.Level,
                    Job = selectedPlayer.Job,
                    Class = selectedPlayer.Class,
                    Guild = selectedPlayer.Guild
                };
        }
    }

    private async Task SaveChanges()
    {
        if (selectedPlayer != null)
        {
            selectedPlayer.PlayerName = newPlayer.PlayerName;
            selectedPlayer.Level = newPlayer.Level;
            selectedPlayer.Job = newPlayer.Job;
            selectedPlayer.Class = newPlayer.Class;
            selectedPlayer.Guild = newPlayer.Guild;

            await SavePlayerToIndexedDB(selectedPlayer);

            newPlayer = new Player();
            selectedPlayer = null;
        }
    }

    private async Task SavePlayerToIndexedDB(Player player)
    {
        await JsRuntime.InvokeVoidAsync("savePlayerToIndexedDB", player);
    }

    public class Player
    {
        public int PlayerId { get; set; }
        public string PlayerName { get; set; }
        public string Level { get; set; }
        public string Job { get; set; }
        public string Class { get; set; }
        public string Guild { get; set; }
    }
}



<style>
    .form-container {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 10px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        background-color: #007bff;
        color: #fff;
    }

    .btn-success {
        background-color: #28a745;
    }

    .btn-primary {
        background-color: #007bff;
    }

    .btn-danger {
        background-color: #dc3545;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #dddddd;
    }
</style>
<script>
    window.savePlayerToIndexedDB = function (player) {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open("PlayerDatabase", 1);

            request.onerror = function () {
                console.error("Error opening IndexedDB database.");
                reject();
            };

            request.onupgradeneeded = function (event) {
                const db = event.target.result;
                const objectStore = db.createObjectStore("players", { keyPath: "playerId" });
            };

            request.onsuccess = function (event) {
                const db = event.target.result;
                const transaction = db.transaction("players", "readwrite");
                const objectStore = transaction.objectStore("players");
                const request = objectStore.put(player);

                request.onsuccess = function () {
                    console.log("Player saved to IndexedDB.");
                    resolve();
                };

                request.onerror = function () {
                    console.error("Error saving player to IndexedDB.");
                    reject();
                };
            };
        });
    };
</script>
