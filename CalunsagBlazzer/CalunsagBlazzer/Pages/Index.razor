@page "/"
@inject IndexModel con
@using CalunsagBlazzer.Models
@using System.Data.SqlClient
@using System.Data
@using Dapper
@using System.Collections



<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />


<form method="post" >
    <div class="form-group">
        <label>ID: </label>
        <input type="text" name="Id_input" class="form-control" placeholder="Id" />
    </div>

    <div class="form-group">
        <label>Name: </label>
        <input type="text" name="Name_input" class="form-control" placeholder="Name" />
    </div>

    <div class="form-group">
        <label>Nickname: </label>
        <input type="text" name="NickName_input" class="form-control" placeholder="NickName" />
    </div>
    <button type="submit" formmethod="post" asp-page-handler="Create">Create</button>
    <button type="submit" formmethod="post" asp-page-handler="Update">Update</button>
</form>

<p></p>

<form id="student-search-form" method="post" asp-page-handler="Search">
    <label>Search</label>
    <input type="text" name="s_input">
    <button type="submit">Search</button>
    <button formmethod="post" asp-page-handler="Display" type="submit" href="">Display</button>
</form>

<form id="student-search-form" method="post" asp-page-handler="Search1">
    <label>Search</label>
    <input type="text" name="Key" placeholder="Search">
    <button type="submit">Search</button>
    <button formmethod="post" asp-page-handler="Display" type="submit">Display</button>
</form>
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>NAME</th>
            <th>NICKNAME</th>
        </tr>
    </thead>       
    <tbody>
        @foreach (var a in con.list)
        {
            <tr>
                <td>@a.r1</td>
                <td>@a.r2</td>
                <td>@a.r3</td>
                <td>
                    <form method="post">
                        <input name="Id_input2" type="hidden" value="@a.r1" />
                        <input name="Name_input2" type="hidden" value="@a.r2" />
                        <input name="NickName_input2" type="hidden" value="@a.r3" />
                        <button type="submit">Edit</button>
                    </form>
                </td>
                <td>
                    <form method="post" asp-page-handler="Delete">
                        <input name="Id_input" type="hidden" value="@a.r1" />
                        <button type="submit">Delete</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

@code{
    #nullable disable
    public class IndexModel
    {
        private readonly ILogger<IndexModel> _logger;
        private readonly IConfiguration _config;
        public IEnumerable<studentModel> list { get; set; }


        public int Id_input { get; set; }
        public string Key { get; set; }
        public string Name_input { get; set; }
        public string NickName_input { get; set; }
        public int Id_input2 { get; set; }
        public string Name_input2 { get; set; }
        public string NickName_input2 { get; set; }
        public string s_input { get; set; }

        public IndexModel(ILogger<IndexModel> logger, IConfiguration config)
        {
            _logger = logger;
            _config = config;

            var conn = new SqlConnection(_config.GetConnectionString("db"));
            list = conn.Query<studentModel>("[display]",
            new 
            { 
                @Id = Id_input, 
                @Name = Name_input, 
                @Nickname = NickName_input 
            }, commandType: CommandType.StoredProcedure);
        }

        private void Create()
        {
            var conn = new SqlConnection(_config.GetConnectionString("db"));
            var asdd = conn.Query("[add]",
                new
                {
                    @Id = Id_input,
                    @Name = Name_input,
                    @Nickname = NickName_input
                }, commandType: CommandType.StoredProcedure);
        }

        private void Update()
    {
        var conn = new SqlConnection(_config.GetConnectionString("db"));
        var asdd = conn.Query("[update]",
            new
            {
                @Id = Id_input,
                @Name = Name_input,
                @Nickname = NickName_input
            }, commandType: CommandType.StoredProcedure);
    }
    public void Edit()
    {
        Id_input = Id_input2;
        Name_input = Name_input2;
        NickName_input = NickName_input2;
    }

    private void Delete()
    {
        var conn = new SqlConnection(_config.GetConnectionString("db"));
        var asdd = conn.Query("[delete]",
            new
            {
                @Id = Id_input
            }, commandType: CommandType.StoredProcedure);
    }
    // this is to check whick search will work
    private void Search()
    {
        var conn = new SqlConnection(_config.GetConnectionString("db"));
        list = conn.Query<studentModel>("[search]",
            new
            {
                @Key = s_input
            }, commandType: CommandType.StoredProcedure);
    }
    // this is to check whick search will work
    private void Search1()
    {
        var CJDB = new SqlConnection(_config.GetConnectionString("db"));
            list = CJDB.Query<studentModel>("[search]", new
        {
            @Key = $"%{Key}%"
        }, commandType: CommandType.StoredProcedure);
    }

    private void Display()
    {
        var conn = new SqlConnection(_config.GetConnectionString("db"));
        list = conn.Query<studentModel>("[display]",new { @Id = Id_input }, commandType: CommandType.StoredProcedure);
    }
}
}